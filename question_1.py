# -*- coding: utf-8 -*-
"""Question 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qK0WpFh4_bp1MRAjV_YAGAVz-8xigRwC
"""

import pandas as pd
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
import re
from sklearn.preprocessing import LabelEncoder

"""Data Loading"""

data = pd.read_csv('/content/Sentiment (3) (1).csv')
data = data[['text','sentiment']]

"""Preprocessing the data"""

data['text'] = data['text'].apply(lambda x: x.lower())
data['text'] = data['text'].apply(lambda x: re.sub('[^a-zA-z0-9\s]', '', x))
for idx, row in data.iterrows():
    row[0] = row[0].replace('rt', ' ')

max_features = 2000
tokenizer = Tokenizer(num_words=max_features, split=' ')
tokenizer.fit_on_texts(data['text'].values)
X = tokenizer.texts_to_sequences(data['text'].values)
X = pad_sequences(X)

embed_dim = 128
lstm_out = 196
def create_model():
    model = Sequential()
    model.add(Embedding(max_features, embed_dim, input_length=X.shape[1]))
    model.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))
    model.add(Dense(3, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

label_encoder = LabelEncoder()
integer_encoded = label_encoder.fit_transform(data['sentiment'])
y = to_categorical(integer_encoded)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

batch_size = 32
model = create_model()
model.fit(X_train, y_train, epochs=1, batch_size=batch_size, verbose=2)

"""Evaluating the model"""

score, acc = model.evaluate(X_test, y_test, verbose=2, batch_size=batch_size)
print("Test score:", score)
print("Test accuracy:", acc)

model.save('sentiment_analysis_model.h5')

from keras.models import load_model
loaded_model = load_model('sentiment_analysis_model.h5')

new_text = "A lot of good things are happening. We are respected again throughout the world, and that's a great thing."
new_text = new_text.lower()
new_text = re.sub('[^a-zA-z0-9\s]', '', new_text)
new_text_sequence = tokenizer.texts_to_sequences([new_text])
new_text_sequence = pad_sequences(new_text_sequence, maxlen=X.shape[1])

prediction = loaded_model.predict(new_text_sequence)
sentiment_labels = ['negative', 'neutral', 'positive']
predicted_sentiment = sentiment_labels[prediction.argmax()]

print("Predicted sentiment:", predicted_sentiment)